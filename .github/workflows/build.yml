name: Build
permissions:
  contents: write
on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

env:
  VULKAN_VERSION: 1.3.261.1
  CC: clang-18
  CXX: clang++-18

jobs:
  build:
    strategy:
      fail-fast: false
      matrix:
        platform:
          - { runner: windows-latest, os: windows, arch: x64,    runtime: MT,          toolchain: clang-cl, archive_ext: .zip }
          - { runner: ubuntu-latest,  os: linux,   arch: x86_64, runtime: c++_static,  toolchain: clang,    archive_ext: .tar.gz }
        mode: [ debug, release ]

    runs-on: ${{ matrix.platform.runner }}
    steps:
      - name: Get current date as package key
        id: cache_key
        run: echo "key=$(date +'%W')" >> $GITHUB_OUTPUT
        shell: bash

      - name: "Set OUTPUT_FILE variable"
        run: echo "OUTPUT_FILE=${{ matrix.platform.os }}_${{ matrix.platform.arch }}_${{ matrix.mode }}_${{ matrix.platform.runtime }}${{ matrix.platform.archive_ext }}" >> $GITHUB_ENV
        shell: bash

      # Force xmake to a specific folder (for cache)
      - name: Set xmake env
        run: echo "XMAKE_GLOBALDIR=${{ runner.workspace }}/xmake-global" >> $GITHUB_ENV
        shell: bash

      - name: Checkout repository
        uses: actions/checkout@v4
        with:
          fetch-depth: 0

      - name: Install LLVM (Unix)
        if: ${{ matrix.platform.os != 'windows' }}
        run: |
          wget https://apt.llvm.org/llvm.sh
          chmod +x ./llvm.sh
          sudo ./llvm.sh 18

      - name: Setup Ninja
        uses: turtlesec-no/get-ninja@1.1.0

      # Install xmake
      - name: Setup xmake
        uses: xmake-io/github-action-setup-xmake@v1.2.2
        with:
          xmake-version: latest
          actions-cache-folder: .xmake-cache-W${{ steps.cache_key.outputs.key }}

      # Add my package repository
      - name: Add third party package repo
        run: xrepo add-repo exdal-repo https://github.com/exdal/xmake-repo

      # Update xmake repository (in order to have the file that will be cached)
      - name: Update xmake repository
        run: xmake repo --update -vD

      # Fetch xmake dephash
      - name: Retrieve dependencies hash
        id: dep_hash
        run: echo "hash=$(xmake l utils.ci.packageskey)" >> $GITHUB_OUTPUT
        shell: bash

      # Retrieve xmake dependencies
      - name: Restore cached xmake dependencies
        id: restore-depcache
        uses: actions/cache/restore@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: ${{ matrix.platform.os }}-${{ matrix.platform.arch }}-${{ matrix.mode }}-${{ matrix.platform.runtime }}-${{ steps.dep_hash.outputs.hash }}-W${{ steps.cache_key.outputs.key }}

      - name: Configure xmake and install dependencies (Unix)
        if: ${{ matrix.platform.os != 'windows' }}
        run: xmake config -vD --arch=${{ matrix.platform.arch }} --toolchain=${{ matrix.platform.toolchain }}  --mode=${{ matrix.mode }} --yes --policies=package.precompiled:n

      - name: Configure xmake and install dependencies (Windows)
        if: ${{ matrix.platform.os == 'windows' }}
        run: xmake config --arch=${{ matrix.platform.arch }} --toolchain=${{ matrix.platform.toolchain }} --mode=${{ matrix.mode }} --vs_runtime=${{ matrix.platform.runtime }} --yes --policies=package.precompiled:n

      # Save dependencies
      - name: Save cached xmake dependencies
        if: ${{ !steps.restore-depcache.outputs.cache-hit }}
        uses: actions/cache/save@v4
        with:
          path: ${{ env.XMAKE_GLOBALDIR }}/.xmake/packages
          key: ${{ steps.restore-depcache.outputs.cache-primary-key }}

      - name: Build all targets
        run: xmake build -vD -a

      - name: Run tests (in this case the single exe)
        run: xmake run -vD --group=EXES

      - name: Install
        run: xmake install -vDo dest/ --group=EXES

      - name: Archive result
        uses: ihiroky/archive-action@v1
        with:
          root_dir: dest
          file_path: ${{ env.OUTPUT_FILE }}
          verbose: true

      - name: Compute checksum of archive
        run: |
          if [ "$RUNNER_OS" == "Windows" ]; then
            sha256sum -b "$OUTPUT_FILE" > "$OUTPUT_FILE.sha256"
          else
            shasum -a 256 -b "$OUTPUT_FILE" > "$OUTPUT_FILE.sha256"
          fi
        shell: bash
