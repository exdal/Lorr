diff --git a/cmake/CompilerFlags.cmake b/cmake/CompilerFlags.cmake
index cd9021cd..591744ce 100644
--- a/cmake/CompilerFlags.cmake
+++ b/cmake/CompilerFlags.cmake
@@ -101,44 +101,8 @@ function(set_default_compile_options target)
         list(
             APPEND
             warning_flags
-            -Wall
-            # Disabled warnings:
-            -Wno-switch
-            -Wno-parentheses
-            -Wno-unused-local-typedefs
-            -Wno-class-memaccess
-            -Wno-assume
-            -Wno-reorder
-            -Wno-invalid-offsetof
-            -Wno-newline-eof
-            -Wno-return-std-move
-            # Enabled warnings:
-            # If a function returns an address/reference to a local, we want it to
-            # produce an error, because it probably means something very bad.
-            -Werror=return-local-addr
-            # Some warnings which are on by default in MSVC
-            -Wnarrowing
+            -w
         )
-        if(ARG_USE_EXTRA_WARNINGS)
-            list(APPEND warning_flags -Wextra)
-        endif()
-        if(ARG_USE_FEWER_WARNINGS)
-            list(
-                APPEND
-                warning_flags
-                -Wno-class-memaccess
-                -Wno-unused-variable
-                -Wno-unused-parameter
-                -Wno-sign-compare
-                -Wno-unused-function
-                -Wno-unused-value
-                -Wno-unused-but-set-variable
-                -Wno-implicit-fallthrough
-                -Wno-missing-field-initializers
-                -Wno-strict-aliasing
-                -Wno-maybe-uninitialized
-            )
-        endif()
     elseif(CMAKE_CXX_COMPILER_ID MATCHES "MSVC")
         list(APPEND warning_flags)
         if(ARG_USE_EXTRA_WARNINGS)
diff --git a/source/core/slang-performance-profiler.cpp b/source/core/slang-performance-profiler.cpp
index f08b4998..6fb194e4 100644
--- a/source/core/slang-performance-profiler.cpp
+++ b/source/core/slang-performance-profiler.cpp
@@ -31,15 +31,6 @@ namespace Slang
         }
         virtual void getResult(StringBuilder& out) override
         {
-            char buffer[512];
-            for (const auto& func : data)
-            {
-                memset(buffer, 0, sizeof(buffer));
-                snprintf(buffer, sizeof(buffer), "[*] %30s", func.key);
-                out << buffer << " \t";
-                auto milliseconds = std::chrono::duration_cast< std::chrono::milliseconds >(func.value.duration);
-                out << func.value.invocationCount << " \t" << milliseconds.count() << "ms\n";
-            }
         }
         virtual void clear() override
         {
